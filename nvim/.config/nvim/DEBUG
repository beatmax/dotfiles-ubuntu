see ~/.gdbinit, "fix pretty printing with gdbserver"

codelldb has pretty printing, but can't attach (it should, but it doesn't)
  TODO, TRY: an attach adaptor (https://github.com/jay-babu/mason-nvim-dap.nvim#advanced-customization),
             with: gdbserver --attach comm pid
with cppdbg, no pretty printing (should try to use system's gdb?)
  note: setting 'program' is mandatory for attach :-(
isn't there just a gdb adaptor???

cppdbg uses:
[max@corsair nvim]$ ./mason/packages/cpptools/extension/debugAdapters/bin/OpenDebugAD7 --help
OpenDebugAD7: Visual Studio Code debug adapter bridge for using Visual Studio
debug engines in VS Code

config:

  -- debugging
  {
    "jay-babu/mason-nvim-dap.nvim",
    event = "VeryLazy",
    dependencies = {
      "williamboman/mason.nvim",
      "mfussenegger/nvim-dap",
    },
    opts = {
      ensure_installed = {
        -- "codelldb",
        "cppdbg",
      },
      -- handlers = {},
      handlers = {
       function(config)
          -- all sources with no handler get passed here
          require('mason-nvim-dap').default_setup(config)
        end,
        cppdbg = function(config)
            config.configurations = {
              {
                name = 'Launch file',
                type = 'cppdbg',
                request = 'launch',
                program = function()
                  return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
                end,
                cwd = '${workspaceFolder}',
                stopAtEntry = true,
              },
              {
                name = 'Attach',
                type = 'cppdbg',
                request = 'attach',
                program = function()
                  return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
                end,
                processId = function()
                  return vim.fn.input('Pid: ')
                end,
                stopAtEntry = true,
              },
            }
            require('mason-nvim-dap').default_setup(config)
        end,
        -- codelldb = function(config)
        --     config.configurations = {
        --       {
        --         name = 'LLDB: Launch',
        --         type = 'codelldb',
        --         request = 'launch',
        --         program = function()
        --           return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
        --         end,
        --         cwd = '${workspaceFolder}',
        --         stopOnEntry = false,
        --         args = {},
        --       },
        --       {
        --         name = 'LLDB: Attach',
        --         type = 'codelldb',
        --         request = 'attach',
        --         program = function()
        --           return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file')
        --         end,
        --         pid = function()
        --           return vim.fn.input('Pid: ')
        --         end,
        --         stopOnEntry = true,
        --       },
        --     }
        --     require('mason-nvim-dap').default_setup(config)
        -- end,
      },
    },
  },
  {
    "mfussenegger/nvim-dap",
    config = function(_, _)
      require("core.utils").load_mappings("dap")
    end
  },
  {
    "rcarriga/nvim-dap-ui",
    event = "VeryLazy",
    dependencies = "mfussenegger/nvim-dap",
    config = function()
      local dap = require("dap")
      local dapui = require("dapui")
      dapui.setup()
      dap.listeners.after.event_initialized["dapui_config"] = function()
        dapui.open()
      end
      dap.listeners.before.event_terminated["dapui_config"] = function()
        dapui.close()
      end
      dap.listeners.before.event_exited["dapui_config"] = function()
        dapui.close()
      end
    end
  },
